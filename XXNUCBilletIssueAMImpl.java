/*===========================================================================+
  |      Copyright (c) 2016 XXNUC Inc., Nucor Steel Corp.                       |
  |                         All rights reserved.                                |
   +===========================================================================+
  |                                                                             |
  |  DESCRIPTION                                                                |
  |    Application Module Class for Billet Issue                                |
  |                                                                             |
  |  HISTORY                                                                    |
  |                                                                             |
  |    05/09/2016 Ayan Saha   Created                                           |
  |                                                                             |
  | $Header: XXNUCBilletIssueAMImpl.java 120.000000000.25308 2018-03-30 19:01:08Z ankit.sharma noship $
   +===========================================================================*/
package xxnuc.oracle.apps.inv.billetissue.server;

import com.sun.java.util.collections.HashMap;
import com.sun.java.util.collections.Vector;

import java.io.Serializable;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Types;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAFwkConstants;
import oracle.apps.fnd.framework.OARow;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.server.OAViewRowImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;

import oracle.jdbc.OracleCallableStatement;
import oracle.jdbc.OracleConnection;
import oracle.jdbc.OraclePreparedStatement;
import oracle.jdbc.OracleResultSet;

import xxnuc.oracle.apps.inv.billetissue.lov.server.XXNUCBilletIssueItemsLovVOImpl;
import xxnuc.oracle.apps.inv.billetissue.lov.server.XXNUCBilletIssueLocatorLovVOImpl;
import xxnuc.oracle.apps.inv.billetissue.poplist.server.XXNUCBilletIssueResourcesVOImpl;
import xxnuc.oracle.apps.inv.billetissue.poplist.server.XXNUCBilletIssueResourcesVORowImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XXNUCBilletIssueAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public XXNUCBilletIssueAMImpl() {
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
        /* Configuration Name */launchTester("xxnuc.oracle.apps.inv.billetissue.server", 
                                             "XXNUCBilletIssueAMLocal");
    }

    /**Container's getter for XXNUCBilletIssueItemsLovVO1
     */
    public XXNUCBilletIssueItemsLovVOImpl getXXNUCBilletIssueItemsLovVO1() {
        return (XXNUCBilletIssueItemsLovVOImpl)findViewObject("XXNUCBilletIssueItemsLovVO1");
    }


    /**Container's getter for XXNUCBilletIssueResourcesVO1
     */
    public XXNUCBilletIssueResourcesVOImpl getXXNUCBilletIssueResourcesVO1() {
        return (XXNUCBilletIssueResourcesVOImpl)findViewObject("XXNUCBilletIssueResourcesVO1");
    }

    /**Container's getter for XXNUCBilletIssueAddItemVO1
     */
    public XXNUCBilletIssueAddItemVOImpl getXXNUCBilletIssueAddItemVO1() {
        return (XXNUCBilletIssueAddItemVOImpl)findViewObject("XXNUCBilletIssueAddItemVO1");
    }

    /**Container's getter for XXNUCBilletIssueBatchDetailsVO1
     */
    public XXNUCBilletIssueBatchDetailsVOImpl getXXNUCBilletIssueBatchDetailsVO1() {
        return (XXNUCBilletIssueBatchDetailsVOImpl)findViewObject("XXNUCBilletIssueBatchDetailsVO1");
    }


    /**Container's getter for XXNUCBilletIssuePieVO1
     */
    public XXNUCBilletIssuePieVOImpl getXXNUCBilletIssuePieVO1() {
        return (XXNUCBilletIssuePieVOImpl)findViewObject("XXNUCBilletIssuePieVO1");
    }

    /**Container's getter for XXNUCBilletIssueLotLPNVO1
     */
    public XXNUCBilletIssueLotLPNVOImpl getXXNUCBilletIssueLotLPNVO1() {
        return (XXNUCBilletIssueLotLPNVOImpl)findViewObject("XXNUCBilletIssueLotLPNVO1");
    }

    /**Container's getter for XXNUCBilletIssueBatchLotVO1
     */
    public XXNUCBilletIssueBatchLotVOImpl getXXNUCBilletIssueBatchLotVO1() {
        return (XXNUCBilletIssueBatchLotVOImpl)findViewObject("XXNUCBilletIssueBatchLotVO1");
    }

    /**Container's getter for XXNUCBilletIssueLPNListingVO1
     */
    public XXNUCBilletIssueLPNListingVOImpl getXXNUCBilletIssueLPNListingVO1() {
        return (XXNUCBilletIssueLPNListingVOImpl)findViewObject("XXNUCBilletIssueLPNListingVO1");
    }
    
    /**Container's getter for XXNUCBilletIssueOrgVO1
    */
    public XXNUCBilletIssueOrgVOImpl getXXNUCBilletIssueOrgVO1() {
    return (XXNUCBilletIssueOrgVOImpl)findViewObject("XXNUCBilletIssueOrgVO1");
    }
    
    /**Container's getter for XXNUCBilletIssueLocatorLovVO1
    */
    public XXNUCBilletIssueLocatorLovVOImpl getXXNUCBilletIssueLocatorLovVO1() {
    return (XXNUCBilletIssueLocatorLovVOImpl)findViewObject("XXNUCBilletIssueLocatorLovVO1");
    }


    /**Container's getter for XXNUCBilletIssueItemLotLPNVO1
    */
    public XXNUCBilletIssueItemLotLPNVOImpl getXXNUCBilletIssueItemLotLPNVO1() {
    return (XXNUCBilletIssueItemLotLPNVOImpl)findViewObject("XXNUCBilletIssueItemLotLPNVO1");
    }
    
    /**Container's getter for XXNUCBilletIssuePPRVO1
    */
    public XXNUCBilletIssuePPRVOImpl getXXNUCBilletIssuePPRVO1() {
    return (XXNUCBilletIssuePPRVOImpl)findViewObject("XXNUCBilletIssuePPRVO1");
    }


    /**
     * This method refreshes the resource poplist for non-IE browsers
     */
    public void refreshResource() {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: refreshResource", 
                                  OAFwkConstants.STATEMENT);
        OAViewObject xxnucResVO = 
            (OAViewObject)findViewObject("XXNUCBilletIssueResourcesVO1");
        xxnucResVO.executeQuery();
    }
    
    /**
     * This method returns the org of the selected resource
     * @param resource
     * @return HashMap of RETURN, strOrgId
     */
    public HashMap getResourceOrg(String resource) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: getResourceOrg: "+resource, 
                                  OAFwkConstants.STATEMENT);
        HashMap hmRet = new HashMap();
        hmRet.put("RETURN", "SUCCESS");
        OAViewObject xxnucResVO = 
            (OAViewObject)findViewObject("XXNUCBilletIssueResourcesVO1");
        String strOrgId = null;
        try {
            Row rowSel = 
                xxnucResVO.getFirstFilteredRow("Resources", resource);
            strOrgId = 
                    rowSel.getAttribute("OrganizationId").toString();
        } catch (Exception e) { // when blank option in drop down is selected
            hmRet.put("RETURN", "NORSRC");
        }
        hmRet.put("strOrgId", strOrgId);
        return hmRet;
    }
    
    /**
     * This clears our the Issue Qty field when its batch is selected
     */
    public void removeIssueRowValues() {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: removeIssueRowValues", 
                                  OAFwkConstants.STATEMENT);
                                  
        OAViewObject xxnucLotVO = 
            (OAViewObject)findViewObject("XXNUCBilletIssueBatchLotVO1");
        RowSetIterator rowIteratorLot = 
            xxnucLotVO.createRowSetIterator("remove");
        int intRows = xxnucLotVO.getRowCount();
        rowIteratorLot.setRangeStart(0);
        rowIteratorLot.setRangeSize(intRows);
        for (int i = 0; i <= intRows - 1; i++) {
            OAViewRowImpl rowCounterLot = 
                (OAViewRowImpl)rowIteratorLot.getRowAtRangeIndex(i);
            //                    if (rowCounterLot.getAttribute("Singleselection") != 
            //                        null && 
            //                        !rowCounterLot.getAttribute("Singleselection").equals("Y") && 
            //                        rowCounterLot.getAttribute("Issueqty") != null)
            rowCounterLot.setAttribute("Issueqty", null);
        }
        rowIteratorLot.closeRowSetIterator();
    }
    
    /**
     * Updates Issue QTY with the count of selected LPNs
     */
    public void setIssuedLotQty() {
            if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
                this.writeDiagnostics(this, 
                                      "XXNUCBilletIssueAMImpl: setIssuedLotQty", 
                                      OAFwkConstants.STATEMENT);
        OAViewObject xxnucLPNVO = 
            (OAViewObject)findViewObject("XXNUCBilletIssueLotLPNVO1");
        int intCount = 0;
        int intSizeLpn = xxnucLPNVO.getRowCount();
        RowSetIterator rowIteratorLpn = 
            xxnucLPNVO.createRowSetIterator("checked");
        rowIteratorLpn.setRangeStart(0);
        rowIteratorLpn.setRangeSize(intSizeLpn);
        for (int i = 0; i <= intSizeLpn - 1; i++) {
            OAViewRowImpl rowCounterLpn = 
                (OAViewRowImpl)rowIteratorLpn.getRowAtRangeIndex(i);
            if (rowCounterLpn.getAttribute("Checkswitch").equals("checkY"))
                intCount++;
        }
        rowIteratorLpn.closeRowSetIterator();

        // get the row to update
        OAViewObject xxnucLotVO = 
            (OAViewObject)findViewObject("XXNUCBilletIssueBatchLotVO1");
        int intSizeLot = xxnucLotVO.getRowCount();
        RowSetIterator rowIteratorLot = 
            xxnucLotVO.createRowSetIterator("selection");
        rowIteratorLot.setRangeStart(0);
        rowIteratorLot.setRangeSize(intSizeLot);
        for (int i = 0; i <= intSizeLot - 1; i++) {
            OAViewRowImpl rowCounterLot = 
                (OAViewRowImpl)rowIteratorLot.getRowAtRangeIndex(i);
            String strSelected = 
                rowCounterLot.getAttribute("Singleselection") + "";
            if (strSelected.equals("Y")) {
                rowCounterLot.setAttribute("Issueqty", intCount);
            }
        }
        rowIteratorLot.closeRowSetIterator();
    }
    
    /**
     * Adds new row when user to add a new item to reserve
     */
    public void addNewItem() {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: addNewItem", 
                                  OAFwkConstants.STATEMENT);
        OAViewObject itemVO = 
            (OAViewObject)findViewObject("XXNUCBilletIssueAddItemVO1");
        Row itemVOrow = itemVO.createRow();
        itemVO.last();
        itemVO.next();
        itemVO.insertRow(itemVOrow);
        itemVOrow.setNewRowState(Row.STATUS_INITIALIZED);
    }
    
    /**
     * Selects the batch that the user entered
     * @param strBatchNoIn
     * @return HashMap of row vales
     */
    public HashMap setSelectedBatch(String strBatchNoIn) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: setSelectedBatch: "+strBatchNoIn, 
                                  OAFwkConstants.STATEMENT);
        HashMap hmRet = new HashMap();
        OAViewObject xxnucLotVO = 
            (OAViewObject)findViewObject("XXNUCBilletIssueBatchLotVO1");
        int intCount = 0;
        OAViewRowImpl currRow = null;
        if (!strBatchNoIn.equals("null") || strBatchNoIn != null || 
            !strBatchNoIn.equals("")) {
            int intSizeLot = xxnucLotVO.getRowCount();
            RowSetIterator rowIteratorLot = 
                xxnucLotVO.createRowSetIterator("selection");
            rowIteratorLot.setRangeStart(0);
            rowIteratorLot.setRangeSize(intSizeLot);
            // unslelect batch
            for (int i = 0; i <= intSizeLot - 1; i++) {
                OAViewRowImpl rowCounterLot = 
                    (OAViewRowImpl)rowIteratorLot.getRowAtRangeIndex(i);
                if (rowCounterLot.getAttribute("Singleselection") != 
                    null && 
                    rowCounterLot.getAttribute("Singleselection").equals("Y")) {
                    rowCounterLot.setAttribute("Singleselection", 
                                               null);
                    rowCounterLot.setAttribute("Issueqty", null);
                }
            }
            //select batch
            for (int i = 0; i <= intSizeLot - 1; i++) {
                OAViewRowImpl rowCounterLot = 
                    (OAViewRowImpl)rowIteratorLot.getRowAtRangeIndex(i);
                String strBatchNo = 
                    rowCounterLot.getAttribute("BatchNo") + "";
                if (strBatchNo.equals(strBatchNoIn)) {
                    rowCounterLot.setAttribute("Singleselection", "Y");
                    intCount++;
                    currRow = 
                            (OAViewRowImpl)rowIteratorLot.getRowAtRangeIndex(i);
                    break;
                }
            }
            if (intCount == 0) {
                //pageContext.putDialogMessage(new OAException("No such batch exists", 
                //                                             OAException.ERROR));
                // unslelect batch
                for (int i = 0; i <= intSizeLot - 1; i++) {
                    OAViewRowImpl rowCounterLot = 
                        (OAViewRowImpl)rowIteratorLot.getRowAtRangeIndex(i);
                    if (rowCounterLot.getAttribute("Singleselection") != 
                        null && 
                        rowCounterLot.getAttribute("Singleselection").equals("Y")) {
                        rowCounterLot.setAttribute("Singleselection", 
                                                   null);
                    }
                }
                rowIteratorLot.closeRowSetIterator();
            } else // found batch, now re-do BatchLotEvent
            {
                String strBatchId = 
                    currRow.getAttribute("BatchId").toString();
                String strOrgId = 
                    currRow.getAttribute("OrganizationId").toString();
                String strLotNo = 
                    (String)currRow.getAttribute("LotNumber");
                String strItemId = 
                    currRow.getAttribute("InventoryItemId").toString();
                String strControl = 
                    (String)currRow.getAttribute("Control");
                hmRet.put("BatchId", strBatchId);
                hmRet.put("OrganizationId", strOrgId);
                hmRet.put("LotNumber", strLotNo);
                hmRet.put("InventoryItemId", strItemId);
                hmRet.put("Control", strControl);
            }
        }
        return hmRet;
    }
    
    /**
     * Update Reserve LPN count when user selects item LPNs
     */
    public void setIssuedItemLotQty() {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: setIssuedItemLotQty", 
                                  OAFwkConstants.STATEMENT);
        OAViewObject xxnucItemLotLPNVO = 
            (OAViewObject)findViewObject("XXNUCBilletIssueItemLotLPNVO1");
        int intCount = 0;
        int intSizeLpn = xxnucItemLotLPNVO.getRowCount();
//        System.out.println("No of rows " + intSizeLpn);
        RowSetIterator rowIteratorLpn = 
            xxnucItemLotLPNVO.createRowSetIterator("checked");
        rowIteratorLpn.setRangeStart(0);
        rowIteratorLpn.setRangeSize(intSizeLpn);
        for (int i = 0; i <= intSizeLpn - 1; i++) {
            OAViewRowImpl rowCounterLpn = 
                (OAViewRowImpl)rowIteratorLpn.getRowAtRangeIndex(i);
            if (rowCounterLpn.getAttribute("MultiSelect").equals("checked"))
                intCount++;
        }
//        System.out.println("Checked :" + intCount);
        rowIteratorLpn.closeRowSetIterator();

        // get the row to update
        OAViewObject xxnucItemVO = 
            (OAViewObject)findViewObject("XXNUCBilletIssueAddItemVO1");
//        System.out.println("No of rows in items VO: " + 
//                           xxnucItemVO.getRowCount());
        RowSetIterator rowIteratorLot = 
            xxnucItemVO.createRowSetIterator("selection");
        rowIteratorLot.setRangeStart(0);
        rowIteratorLot.setRangeSize(1); // always 1 row
        OAViewRowImpl rowCounterLot = 
            (OAViewRowImpl)rowIteratorLot.getRowAtRangeIndex(0);
        rowCounterLot.setAttribute("IssueQty", intCount);
        rowIteratorLot.closeRowSetIterator();
    }
    
    /**
     * When user updates the number of Issue LPN, then this will select that number of LPNs
     * @return errorMsg
     */
    public String checkLPNsForQty() {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: checkLPNsForQty", 
                                  OAFwkConstants.STATEMENT);
        String errorMsg = "SUCCESS";
        OAViewObject xxnucLPNVO = 
            (OAViewObject)findViewObject("XXNUCBilletIssueLotLPNVO1");
        // String strTotLpn = xxnucLPNVO.getRowCount() + "";
        RowSetIterator rowIteratorLPN = xxnucLPNVO.createRowSetIterator("");
        rowIteratorLPN.setRangeStart(0);
        rowIteratorLPN.setRangeSize(xxnucLPNVO.getRowCount());
        int intTotLpn = 0;
        for (int z = 0; z < xxnucLPNVO.getRowCount(); z++) {
            OAViewRowImpl rowLPN = 
                (OAViewRowImpl)rowIteratorLPN.getRowAtRangeIndex(z);
            if (rowLPN.getAttribute("Checkswitch") != null && 
                !rowLPN.getAttribute("Checkswitch").equals("") && 
                rowLPN.getAttribute("Status") != null && 
                !rowLPN.getAttribute("Status").equals("") && 
                !rowLPN.getAttribute("Status").equals("DisabledX"))
                intTotLpn++;
        }
        rowIteratorLPN.closeRowSetIterator();

        // String singleSelection = pageContext.getParameter(EVENT_SOURCE_ROW_REFERENCE);
        OARow currRow = null; //= (OARow)am.findRowByRef(singleSelection);
        //  String rowRef = 
        //    pageContext.getParameter(OAWebBeanConstants.EVENT_SOURCE_ROW_REFERENCE);
        //  OARow row = (OARow)am.findRowByRef(rowRef);
        OAViewObject xxnucLotVO = 
            (OAViewObject)findViewObject("XXNUCBilletIssueBatchLotVO1");
        RowSetIterator rowIteratorLot = 
            xxnucLotVO.createRowSetIterator("find");
        int intRows = xxnucLotVO.getRowCount();
        rowIteratorLot.setRangeStart(0);
        rowIteratorLot.setRangeSize(intRows);
//        System.out.println("loop to find current row");
        for (int i = 0; i <= intRows - 1; i++) {
            OAViewRowImpl rowCounterLot = 
                (OAViewRowImpl)rowIteratorLot.getRowAtRangeIndex(i);
            if (rowCounterLot.getAttribute("Singleselection") != null && 
                rowCounterLot.getAttribute("Singleselection").equals("Y"))
                currRow = rowCounterLot;
        }
        rowIteratorLot.closeRowSetIterator();

        // check for no. of LPNs

        if
            //        && row!= null && row.getAttribute("Singleselection") != null && row.getAttribute("Singleselection").equals("Y") 
            (currRow != null) {
            String strIssueQty = currRow.getAttribute("Issueqty") + "";
//            System.out.println("currRow and row are same!!! and strIssueQty = " + 
//                               strIssueQty);
            try {
                int intIssueQty = Integer.parseInt(strIssueQty);
                //int intTotLpn = Integer.parseInt(strTotLpn);
//                System.out.println(intIssueQty + 
//                                   " = Integer.parseInt(strIssueQty);");
//                System.out.println(intTotLpn + 
//                                   " = Integer.parseInt(strTotLpn);");
                if (intIssueQty < 0) {
                    throw new NumberFormatException();
                }
                if (intIssueQty > intTotLpn) {
//                    System.out.println("if intIssueQty > intTotLpn ");
                    errorMsg = "EXCEED_AVAIL";
                    //pageContext.putDialogMessage(new OAException("XXNUC", 
                    //                                     "XXNUC_LPN_STATUS_MSG", 
                    //                                     null, 
                    //                                     OAException.WARNING, 
                    //                                     null));
                    // reset LPN
                    String strBatchId = 
                        currRow.getAttribute("BatchId").toString();
                    String strOrgId = 
                        currRow.getAttribute("OrganizationId").toString();
                    String strLotNo = 
                        (String)currRow.getAttribute("LotNumber");
                    String strItemId = 
                        currRow.getAttribute("InventoryItemId").toString();
                    String strControl = 
                        (String)currRow.getAttribute("Control");
                    initLotLPNVO(strOrgId, strBatchId, strLotNo, strItemId, strControl);
                    //Serializable[] srLpn = 
                    //{ strOrgId, strBatchId, strLotNo, strItemId, strControl };
                    //invokeMethod("initLotLPNVO", srLpn);
                } else {
                    // select the number of LPNs top-down
//                    System.out.println("Else of if intIssueQty > intTotLpn ");
                    int rowCount = xxnucLPNVO.getRowCount();
                    RowSetIterator rowIteratorLpn = 
                        xxnucLPNVO.createRowSetIterator("checked");
                    rowIteratorLpn.setRangeStart(0);
                    rowIteratorLpn.setRangeSize(rowCount);
                    for (int i = 0; i <= rowCount - 1; i++) { // check top N LPNs
                        OAViewRowImpl rowCounterLpn = 
                            (OAViewRowImpl)rowIteratorLpn.getRowAtRangeIndex(i);
                        if (rowCounterLpn.getAttribute("Checkswitch") != 
                            null && intIssueQty > 0 && 
                            !rowCounterLpn.getAttribute("Status").equals("DisabledX")){
                                intIssueQty--;
                                rowCounterLpn.setAttribute("Checkswitch", "checkY");
//                                System.out.println("selected one row");
                            }
                        else
                            rowCounterLpn.setAttribute("Checkswitch", "checkN");

                    }
                    rowIteratorLpn.closeRowSetIterator();
                }
            } catch (NumberFormatException e) {
//                System.out.println("tabOutBatchLot exit");
                errorMsg = "BAD_FORMAT";
                //pageContext.putDialogMessage(new OAException("Issue quantity of LPNs must be a non zero positive Integer value which is less than or equal to avaialble quanntity of LPNs for the lot", 
                //                                             OAException.ERROR));
            }
            // validate total
            //String retMsg = validateTotal(pageContext, webBean);
            //System.out.println("Return message from validateTotal method" + 
            //                   retMsg);

        } else
            errorMsg = "BATCH_NOT_SELECTED";
            //pageContext.putDialogMessage(new OAException("Please select the batch/lot combination before trying to issue LPNs", 
            //                                             OAException.ERROR));
        return errorMsg;
    }
    
    /**
     * When user updates the number of Issue LPN, then this will select that number of LPNs
     * @param strInvId
     * @param strLotNo
     * @param strLocatorId
     * @param strOrgId
     * @param strSubInv
     * @return errorMsg
     */
    public String checkItemLPNsForQty(String strInvId, String strLotNo, String strLocatorId, String strOrgId, String strSubInv) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: checkItemLPNsForQty: "+strInvId+" "+strLotNo+" "+strLocatorId+" "+strOrgId+" "+strSubInv, 
                                  OAFwkConstants.STATEMENT);
        String errorMsg = "SUCCESS";
        OAViewObject xxnucItemLotLPNVO = 
            (OAViewObject)findViewObject("XXNUCBilletIssueItemLotLPNVO1");
        String strTotLpn = xxnucItemLotLPNVO.getRowCount() + ""; // no. of LPNs
        // String strRow = pageContext.getParameter(EVENT_SOURCE_ROW_REFERENCE);
        OARow currRow = null; // (OARow)am.findRowByRef(strRow);

        OAViewObject xxnucItemVO = 
            (OAViewObject)findViewObject("XXNUCBilletIssueAddItemVO1");
        RowSetIterator rowIteratorItem = 
            xxnucItemVO.createRowSetIterator("find");
        rowIteratorItem.setRangeStart(0);
        rowIteratorItem.setRangeSize(1);
        OAViewRowImpl rowCounterLot = 
            (OAViewRowImpl)rowIteratorItem.getRowAtRangeIndex(0);
        currRow = rowCounterLot;
        rowIteratorItem.closeRowSetIterator();

        // check for no. of LPNs
        String strIssueQty = currRow.getAttribute("IssueQty") + "";
        try {
            int intIssueQty = Integer.parseInt(strIssueQty);
            int intTotLpn = Integer.parseInt(strTotLpn);
            if (intIssueQty < 0) {
                throw new NumberFormatException();
            }
            if (intIssueQty > intTotLpn) {
                errorMsg = "EXCEED_AVAIL";                
                //pageContext.putDialogMessage(new OAException("XXNUC", 
                //                                         "XXNUC_LPN_STATUS_MSG", 
                //                                         null, 
                //                                         OAException.WARNING, 
                //                                         null));
                // reset LPN
                Serializable[] srItem = 
                { strInvId, strLotNo, strLocatorId, strOrgId, strSubInv };
                invokeMethod("initItemLotLPNVO", srItem);

            } else {
                // select the number of LPNs top-down
                RowSetIterator rowIteratorLpn = 
                    xxnucItemLotLPNVO.createRowSetIterator("checked");
                rowIteratorLpn.setRangeStart(0);
                rowIteratorLpn.setRangeSize(intTotLpn);
                for (int i = 0; i <= intTotLpn - 1; 
                     i++, intIssueQty--) { // check top N LPNs
                    OAViewRowImpl rowCounterLpn = 
                        (OAViewRowImpl)rowIteratorLpn.getRowAtRangeIndex(i);
                    if (rowCounterLpn.getAttribute("MultiSelect") != null && 
                        intIssueQty > 0)
                        rowCounterLpn.setAttribute("MultiSelect", "checked");
                    else
                        rowCounterLpn.setAttribute("MultiSelect", "unchecked");

                }
                rowIteratorLpn.closeRowSetIterator();
            }

        } catch (NumberFormatException e) {
//            System.out.println("tabOutItem exit");
            errorMsg = "BAD_FORMAT";
            //pageContext.putDialogMessage(new OAException("Issue quantity of LPNs must be a non zero positive Integer value which is less than or equal to avaialble quanntity of LPNs for the lot", 
            //                                             OAException.ERROR));
        }
        return errorMsg;
    }
    
    /**
     * Returns error if the LPNs selected exceeds reserve quantity of the batch
     * @return errorMsg
     */
    public String validateLPNQty() {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: validateLPNQty", 
                                  OAFwkConstants.STATEMENT);
        String errorMsg = "SUCCESS";
        Float fPQty = 0.0f;
        String strPQtyUOM = null;
        OAViewObject xxnucLotVO = 
            (OAViewObject)findViewObject("XXNUCBilletIssueBatchLotVO1");
        RowSetIterator rowIteratorLot = 
            xxnucLotVO.createRowSetIterator("find");
        int intRows = xxnucLotVO.getRowCount();
//        System.out.println(intRows);
        rowIteratorLot.setRangeStart(0);
        rowIteratorLot.setRangeSize(intRows);
        for (int i = 0; i <= intRows - 1; i++) {
            OAViewRowImpl rowCounterLot = 
                (OAViewRowImpl)rowIteratorLot.getRowAtRangeIndex(i);
            if (rowCounterLot.getAttribute("Singleselection") != null && 
                !rowCounterLot.getAttribute("Singleselection").equals("") && 
                rowCounterLot.getAttribute("Singleselection").equals("Y")) {
                fPQty = 
                        Float.parseFloat(rowCounterLot.getAttribute("PrimaryReservationQuantity").toString());
                strPQtyUOM = rowCounterLot.getAttribute("Uom").toString();
            }
        }
        rowIteratorLot.closeRowSetIterator();
//        System.out.println("********** The value of Primary Quantity of Selected Line is " + 
//                           fPQty + " " + strPQtyUOM);

        OAViewObject xxnucLPNVO = 
            (OAViewObject)findViewObject("XXNUCBilletIssueLotLPNVO1");
        int intTotLpn = xxnucLPNVO.getRowCount();
        Float fTotP = 0.0f;
        String strPUom = null;
        Float fP = 0.0f;
        RowSetIterator rowIteratorLpn = 
            xxnucLPNVO.createRowSetIterator("checked");
        rowIteratorLpn.setRangeStart(0);
        rowIteratorLpn.setRangeSize(intTotLpn);
        for (int i = 0; i < intTotLpn ; i++) { // check top N LPNs
            OAViewRowImpl rowCounterLpn = 
                (OAViewRowImpl)rowIteratorLpn.getRowAtRangeIndex(i);
            if (rowCounterLpn.getAttribute("Checkswitch") != null && 
                rowCounterLpn.getAttribute("Checkswitch").equals("checkY")) {
                strPUom = rowCounterLpn.getAttribute("Uom").toString();
                if (!strPUom.equals(strPQtyUOM)) {
                    Serializable[] params = 
                    { rowCounterLpn.getAttribute("InventoryItemId").toString(), 
                      rowCounterLpn.getAttribute("OrganizationId").toString(), 
                      rowCounterLpn.getAttribute("PrimaryReservationQuantity").toString(), 
                      strPUom, strPQtyUOM };
                    fP = 
        Float.parseFloat(invokeMethod("inv_convert", params).toString());
                } else
                    fP = 
        Float.parseFloat(rowCounterLpn.getAttribute("PrimaryReservationQuantity").toString());
                fTotP = fTotP + fP;
            }
        }
        rowIteratorLpn.closeRowSetIterator();

//        System.out.println("********** The value of Primary Quantity of Avaialble LPN is " + 
//                           fTotP + " " + strPQtyUOM);
//        System.out.println("After Issued Count");
        Serializable[] paramP = { strPQtyUOM };
        Float fPissuedQty = 
            Float.parseFloat(invokeMethod("getTotalIssuedQty", 
                                             paramP).toString());

//        System.out.println("********** The value of Primary Quantity of Issued LPN is " + 
//                           fTotP + strPQtyUOM);

        if (fPQty < fTotP) {
            errorMsg = "EXCEED_RSRV";
            //pageContext.putDialogMessage(new OAException("The total quantity in LPNs cannot exceed the reserved quantity", 
            //                                             OAException.ERROR));
        }
//        System.out.println("validateTotal exit");
        return errorMsg;
    }
     
    /**
     * This method issues LPN from batch
     * @param p_batch_no
     * @param p_line_no
     * @param p_lpn_id
     * @param p_locator_id
     * @param p_organization_id
     * @param p_organization_code
     * @param p_inventory_item_id
     * @param p_dtl_um
     * @param p_subinventory_code
     * @param p_lot_control_code
     * @param p_lot_no
     * @param p_priQty
     * @param p_secQty
     * @param p_batch_id
     * @param p_reservation_id
     * @return
     */
    public String do_issue(String p_batch_no, String p_line_no, 
                           String p_lpn_id, String p_locator_id, 
                           String p_organization_id, 
                           String p_organization_code, 
                           String p_inventory_item_id, String p_dtl_um, 
                           String p_subinventory_code, 
                           String p_lot_control_code, String p_lot_no, 
                           String p_priQty, String p_secQty, String p_batch_id, 
                           String p_reservation_id) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: do_issue: " + p_batch_no + 
                                  " " + p_line_no + " " + p_lpn_id + " " + 
                                  p_locator_id + " " + p_organization_id + 
                                  " " + p_organization_code + " " + 
                                  p_inventory_item_id + " " + p_dtl_um + " " + 
                                  p_subinventory_code + " " + 
                                  p_lot_control_code + " " + p_lot_no + " " + 
                                  p_priQty + " " + p_secQty + " " + 
                                  p_batch_id + " " + p_reservation_id, 
                                  OAFwkConstants.STATEMENT);
//        System.out.println("AM do_issue Entry");
        OADBTransaction txn = getOADBTransaction();
        String strRet = "success";
        OracleCallableStatement issueCall = null;
        int strCode = -1;
        String errcode = null;
        String errbuff = null;
        issueCall = 
                (OracleCallableStatement)txn.createCallableStatement("begin xxnuc_inv_billet_issue_pkg.wip_issue(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16,:17); end;", 
                                                                     1);
        try {
//            System.out.println("Setting input");
            issueCall.setString(1, p_batch_no);
            issueCall.setString(2, p_lpn_id);
            issueCall.setString(3, p_line_no);
            issueCall.setString(4, p_locator_id);
            issueCall.setString(5, p_organization_id);
            issueCall.setString(6, p_organization_code);
            issueCall.setString(7, p_inventory_item_id);
            issueCall.setString(8, p_dtl_um);
            issueCall.setString(9, p_subinventory_code);
            issueCall.setString(10, p_lot_control_code);
            issueCall.setString(11, p_lot_no);
            issueCall.setString(12, p_priQty);
            issueCall.setString(13, p_secQty);
            issueCall.setString(14, p_batch_id);
            issueCall.setString(15, p_reservation_id);
            issueCall.registerOutParameter(16, Types.VARCHAR);
            issueCall.registerOutParameter(17, Types.VARCHAR);
//            System.out.println("Executing");
            issueCall.execute();
//            System.out.println("Issued");
            errcode = issueCall.getString(16);
            errbuff = issueCall.getString(17);
            if(issueCall != null)
                issueCall.close();
//            System.out.println("Done");
        } catch (Exception e) {
            strCode = 2;
            strRet = e.toString();
//            System.out.println("AM do_issue Exit In exception: strCode " + 
//                               strCode + " strRet " + strRet);
            return strRet;
        }
        finally {
                   try {
                       if (issueCall != null)
                           issueCall.close();
                   } catch (Exception e) {
                       e.printStackTrace();
                   }
               }

        if (!errcode.equals("0"))
            strRet = errbuff;
        else if (errcode == null)
            strRet = "Unavoidable error";
        else
            strRet = "Success";

//        System.out.println("AM do_issue Exit : strRet " + strRet + 
//                           " errcode " + errcode);
        return strRet;
    }

    /**
     * This method checks for the number of LPNs avaialble in a selected lot/batch/org category
     * @param pBatchId
     * @param pOrgId
     * @param pLotNo
     * @return rowCount()
     */
    public int doValidate(String pBatchId, String pOrgId, String pLotNo) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: doValidate: " + pBatchId + 
                                  " " + pOrgId + " " + pLotNo, 
                                  OAFwkConstants.STATEMENT);
//        System.out.println("AM doValidate entry");
        XXNUCBilletIssueLotLPNVOImpl lpnVO = getXXNUCBilletIssueLotLPNVO1();
        lpnVO.clearCache();
        lpnVO.cancelQuery();
        lpnVO.setWhereClause("batch_id= " + pBatchId + 
                             " and organization_id= " + pOrgId + 
                             " and lot_number= '" + pLotNo + "'");
        lpnVO.executeQuery();
//        System.out.println("AM doValidate exit");
        return lpnVO.getRowCount();
    }

    /**
     * This method reserves an item to batch/lot/lpn combination
     * @param p_batch_id
     * @param p_batchstep_no
     * @param p_item_id
     * @param p_org_id
     * @param p_oprn_no
     * @param p_locator_id
     * @param p_subinv_code
     * @param p_uom
     * @param p_lot_no
     * @param p_batch_no
     * @param p_org_code
     * @param p_lpn_id
     * @return
     */
    public String addItem(String p_batch_id, String p_batchstep_no, 
                          String p_item_id, String p_org_id, String p_oprn_no, 
                          String p_locator_id, String p_subinv_code, 
                          String p_uom, String p_lot_no, String p_batch_no, 
                          String p_org_code, String p_lpn_id
                          , String strYield // sft-869
                          ) {
//        System.out.println("AM addItem entry");
 if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
     this.writeDiagnostics(this, 
                           "XXNUCBilletIssueAMImpl: addItem: " +p_batch_id +" "+ p_batchstep_no 
                          +" "+ p_item_id +" "+ p_org_id +" "+ p_oprn_no 
                          +" "+ p_locator_id +" "+ p_subinv_code 
                          +" "+ p_uom +" "+ p_lot_no +" "+ p_batch_no 
                          +" "+ p_org_code +" "+ p_lpn_id, 
                           OAFwkConstants.STATEMENT);
                           
        OADBTransaction txn = getOADBTransaction();
        String strRet = "Success";
        OracleCallableStatement issueCall = null;
        int strCode = -1;
        String errcode = null;
        String errbuff = null;
        issueCall = 
                (OracleCallableStatement)txn.createCallableStatement("begin xxnuc_inv_billet_issue_pkg.item_issue(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16); end;",  // sft-869
                                                                     1);

        try {
//            System.out.println("Setting input");
            issueCall.registerOutParameter(1, Types.VARCHAR);
            issueCall.registerOutParameter(2, Types.VARCHAR);
            issueCall.setInt(3, Integer.parseInt(p_batch_id));
            issueCall.setString(4, p_batchstep_no);
            issueCall.setInt(5, Integer.parseInt(p_item_id));
            issueCall.setInt(6, Integer.parseInt(p_org_id));
            issueCall.setString(7, p_oprn_no);
            issueCall.setInt(8, Integer.parseInt(p_locator_id));
            issueCall.setString(9, p_subinv_code);
            issueCall.setString(10, p_uom);
            issueCall.setString(11, p_lot_no);
            issueCall.setString(12, p_batch_no);
            issueCall.setString(13, p_org_code);
            issueCall.setString(14, ""); // p_line_no
            issueCall.setString(15, p_lpn_id);
            issueCall.setString(16,strYield); // sft-869
//            System.out.println("Executing");
            issueCall.execute();
//            System.out.println("Added");
            errcode = issueCall.getString(1);
            errbuff = issueCall.getString(2);
            if(issueCall != null)
                issueCall.close();
//            System.out.println("Done");
        } catch (Exception e) {
            strCode = 2;
            strRet = e.toString();
//            System.out.println("AM addItem Exit In exception: strCode " + 
//                               strCode + " strRet " + strRet);
            return strRet;
        }
        
        finally {
                   try {
                       if (issueCall != null)
                           issueCall.close();
                   } catch (Exception e) {
                       e.printStackTrace();
                   }
               }
               
        if (!errcode.equals("0"))
            strRet = errbuff;
        else if (errcode == null)
            strRet = "Unavoidable error";
        else
            strRet = "Success";

//        System.out.println("AM addItem Exit : strRet " + strRet + " errcode " + 
//                           errcode);
        return strRet;
    }

    /**
     * Inititalizes VO
     * @param p_strAdditemsbtn
     * @param p_strRow2col2
     * @param p_strRow3col1
     * @param p_strRow3col2
     * @param p_strMaterialTransfer
     */
    public void initPPRVO(String p_strAdditemsbtn, String p_strRow2col2, 
                          String p_strRow3col1, String p_strRow3col2, String p_strMaterialTransfer, String strViewSch) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: initPPRVO: " +p_strAdditemsbtn +" "+ p_strRow2col2 
                                 +" "+ p_strRow3col1 +" "+ p_strRow3col2 + " "+ p_strMaterialTransfer, 
                                  OAFwkConstants.STATEMENT);
//        System.out.println("AM initPVO entry");
        XXNUCBilletIssuePPRVOImpl pVO = getXXNUCBilletIssuePPRVO1();
        pVO.clearCache();
        pVO.cancelQuery();
        pVO.executeQuery();
        XXNUCBilletIssuePPRVORowImpl pVOrow = 
            (XXNUCBilletIssuePPRVORowImpl)pVO.createRow();
        if (p_strAdditemsbtn != null)
            pVOrow.setAttribute("Additemsbtn", Boolean.FALSE);
        if (p_strRow2col2 != null)
            pVOrow.setAttribute("Prow2col2", Boolean.FALSE);
        if (p_strRow3col1 != null)
            pVOrow.setAttribute("Prow3col1", Boolean.FALSE);
        if (p_strRow3col2 != null)
            pVOrow.setAttribute("Prow3col2", Boolean.FALSE);
        if (p_strMaterialTransfer != null)
            pVOrow.setAttribute("RndrMatTransfer", Boolean.FALSE);
        // sft 933
        System.out.println("strViewSch "+strViewSch);
        if (null!=strViewSch && !"".equals(strViewSch) && !"null".equals(strViewSch)){
            pVOrow.setRenderViewSch(Boolean.FALSE);
            System.out.println("set to rendered false");
        }
        // end
         pVO.insertRow(pVOrow);
        pVOrow.setNewRowState(Row.STATUS_INITIALIZED);
//        System.out.println("AM initPVO exit");
    }
    
    /**
     * sft - 933
     * @param bol
     */
    public void renderViewSchBtn(Boolean bol){
        XXNUCBilletIssuePPRVOImpl vo = getXXNUCBilletIssuePPRVO1();
        XXNUCBilletIssuePPRVORowImpl voRow = (XXNUCBilletIssuePPRVORowImpl)vo.first();
        if(null!=voRow)
            voRow.setRenderViewSch(bol);
    }
    
    /**
     * Inititalizes VO
     */
    public void initAddItemVO(String strSegment1, String strItemId, 
                              String strOrgId) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: initAddItemVO: "+strSegment1+" "+strItemId+" "+strOrgId, 
                                  OAFwkConstants.STATEMENT);
//        System.out.println("AM initAddItemVO entry");
        XXNUCBilletIssueAddItemVOImpl AddItemVO = 
            getXXNUCBilletIssueAddItemVO1();
        AddItemVO.initQuery();
        XXNUCBilletIssueAddItemVORowImpl AddItemVORow = 
            (XXNUCBilletIssueAddItemVORowImpl)AddItemVO.getRowAtRangeIndex(0);
        AddItemVORow.setSegment1(strSegment1);
        AddItemVORow.setItemId(strItemId);
        AddItemVORow.setOrgId(strOrgId);
//        System.out.println("AM initAddItemVO exit");
    }

    /**
     * Inititalizes VO
     * @param p_strOrganizationId
     * @param p_strBatchId
     */
    public void initBatchDetailsVO(String p_strOrganizationId, 
                                   String p_strBatchId, String p_strRes) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: initBatchDetailsVO: "+p_strOrganizationId+" "+p_strBatchId+" "+p_strRes, 
                                  OAFwkConstants.STATEMENT);
//        System.out.println("AM initBatchDetailsVO entry");
        XXNUCBilletIssueBatchDetailsVOImpl BatchDetailsVO = 
            getXXNUCBilletIssueBatchDetailsVO1();
        BatchDetailsVO.initQuery(p_strOrganizationId, p_strBatchId, p_strRes);
//        System.out.println("AM initBatchDetailsVO exit");
    }

    /**
     * Inititalizes VO
     * @param p_strOrganizationId
     * @param p_strResource
     */
    public void initBatchLotVO(String p_strOrganizationId, 
                               String p_strResource, String p_totLPN) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: initBatchLotVO: "+p_strOrganizationId+" "+p_strResource+" "+p_totLPN, 
                                  OAFwkConstants.STATEMENT);
//        System.out.println("AM initBatchLotVO entry");
        
        String strFlagAttr2="N";
        XXNUCBilletIssueResourcesVOImpl BilletIssueResourcesVO=getXXNUCBilletIssueResourcesVO1();
        XXNUCBilletIssueResourcesVORowImpl voRow = (XXNUCBilletIssueResourcesVORowImpl)BilletIssueResourcesVO.first();
        String strOrgCode="";
        if(voRow!=null){
            strOrgCode=voRow.getOrganizationCode();
        }
        XXNUCBilletIssueFPCheckVOImpl billetIssueFPCheckVO=getXXNUCBilletIssueFPCheckVO();
        billetIssueFPCheckVO.initQuery(strOrgCode+"_"+p_strResource);
        XXNUCBilletIssueFPCheckVORowImpl fpCheckRow=(XXNUCBilletIssueFPCheckVORowImpl)billetIssueFPCheckVO.first();
        if(fpCheckRow!=null){
            strFlagAttr2=fpCheckRow.getDescription();  
        }
        XXNUCBilletIssueBatchLotVOImpl BatchLotVO = 
            getXXNUCBilletIssueBatchLotVO1();
        BatchLotVO.initQuery(p_strOrganizationId, p_strResource, p_totLPN,strFlagAttr2);
//        System.out.println("AM initBatchLotVO exit");
    }

    /**
     * Inititalizes VO
     * @param p_strOrganizationId
     * @param p_strBatchId
     * @param p_strLotNumber
     */
    public void initLotLPNVO(String p_strOrganizationId, String p_strBatchId, 
                             String p_strLotNumber, String p_strInventoryId, 
                             String p_strControl) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: initLotLPNVO: "+p_strOrganizationId+" "+p_strBatchId+" "+p_strLotNumber+" "+p_strInventoryId+" "+p_strControl, 
                                  OAFwkConstants.STATEMENT);
//        System.out.println("AM initLotLPNVO entry : p_strOrganizationId = " + p_strOrganizationId + ", p_strBatchId = " + p_strBatchId + ", p_strLotNumber = " + p_strLotNumber + ", p_strInventoryId = " + p_strInventoryId + ", p_strControl = " + p_strControl);
        XXNUCBilletIssueLotLPNVOImpl LotLPNVO = getXXNUCBilletIssueLotLPNVO1();
        LotLPNVO.initQuery(p_strOrganizationId, p_strBatchId, p_strLotNumber, 
                           p_strInventoryId, p_strControl);
//        System.out.println("AM initLotLPNVO exit");
    }

    /**
     * Inititalizes VO
     * @param p_strOrganizationId
     * @param p_strBatchId
     * @param p_strLotNumber
     */
    public void initLPNListingVO(String p_strOrganizationId, 
                                 String p_strBatchId, String p_strLotNumber, 
                                 String p_inventoryId) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: initLPNListingVO: "+p_strOrganizationId+" "+p_strBatchId+" "+p_strLotNumber+" "+p_inventoryId, 
                                  OAFwkConstants.STATEMENT);
//        System.out.println("AM initLPNListingVO entry");
        XXNUCBilletIssueLPNListingVOImpl LPNListingVO = 
            getXXNUCBilletIssueLPNListingVO1();
        LPNListingVO.initQuery(p_strOrganizationId, p_strBatchId, 
                               p_strLotNumber, p_inventoryId);
//        System.out.println("AM initLPNListingVO exit");
    }

    /**
     * Inititalizes VO
     * @param p_strOrganizationId
     * @param p_strBatchId
     * @param p_strLotNumber
     */
    public void initPieVO(String p_strOrganizationId, String p_strBatchId, 
                          String p_strLotNumber) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: initPieVO: "+p_strOrganizationId+" "+p_strBatchId+" "+
                                  p_strLotNumber, 
                                  OAFwkConstants.STATEMENT);
//        System.out.println("AM initPieVO entry");
        XXNUCBilletIssuePieVOImpl PieVO = getXXNUCBilletIssuePieVO1();
        if (p_strOrganizationId == null || p_strBatchId == null || 
            p_strLotNumber == null || 
            p_strOrganizationId.toString().equals("null") || 
            p_strBatchId.toString().equals("null") || 
            p_strLotNumber.toString().equals("null") || 
            p_strOrganizationId.toString().equals("") || 
            p_strBatchId.toString().equals("") || 
            p_strLotNumber.toString().equals("")) // pressing Refresh before selecting Lot
        {
            p_strOrganizationId = "0";
            p_strBatchId = "0";
            p_strLotNumber = "0";
        }
        PieVO.initQuery(p_strOrganizationId, p_strBatchId, p_strLotNumber);
//        System.out.println("AM initPieVO exit");
    }

    /**
     * Refrsh VOs
     * @param p_strOrganizationId
     * @param p_strBatchId
     * @param p_strLotNumber
     * @param p_strResource
     */
    public void refresh(String p_strOrganizationId, String p_strBatchId, 
                        String p_strLotNumber, String p_strResource, 
                        String p_inventoryId, String p_strControl, String p_checkAll) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: refresh: "+p_strOrganizationId+" "+p_strBatchId+" "+
                                  p_strLotNumber+" "+p_strResource+" "+p_inventoryId+" "+p_strResource+" "+p_checkAll, 
                                  OAFwkConstants.STATEMENT);
//        System.out.println("AM refresh entry");
        String p_totLPN = "";
        if (p_checkAll != null & p_checkAll.equalsIgnoreCase("Y"))
            p_totLPN = "-1";
        else
            p_totLPN = "0";
        initBatchLotVO(p_strOrganizationId, p_strResource, p_totLPN);
        initBatchDetailsVO(p_strOrganizationId, p_strBatchId, p_strResource);
        initLotLPNVO(p_strOrganizationId, p_strBatchId, p_strLotNumber, 
                     p_inventoryId, p_strControl);
        initLPNListingVO(p_strOrganizationId, p_strBatchId, p_strLotNumber, 
                         p_inventoryId);
        initPieVO(p_strOrganizationId, p_strBatchId, p_strLotNumber);
//        System.out.println("AM refresh exit");
    }

    /**
     * Retain selection after VO refresh
     * @param p_strBatchId
     * @param p_strLotNumber
     * @param p_inventoryId
     * @return
     */
    public int retainSelection(String p_strBatchId, String p_strLotNumber, 
                               String p_inventoryId, String p_strControl) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: retainSelection: "+p_strBatchId+" "+p_strLotNumber+" "+
                                  p_inventoryId+" "+p_strControl, 
                                  OAFwkConstants.STATEMENT);
//        System.out.println("AM retainSelection entry");
        int i = 0;
        XXNUCBilletIssueBatchLotVOImpl BatchLotVO = 
            getXXNUCBilletIssueBatchLotVO1();
        int intSizeLot = BatchLotVO.getRowCount();
        RowSetIterator rowIteratorLot = 
            BatchLotVO.createRowSetIterator("selection");
        rowIteratorLot.setRangeStart(0);
        rowIteratorLot.setRangeSize(intSizeLot);
        for (int j = 0; j <= intSizeLot - 1; j++) {
            XXNUCBilletIssueBatchLotVORowImpl rowCounterLot = 
                (XXNUCBilletIssueBatchLotVORowImpl)rowIteratorLot.getRowAtRangeIndex(j);
            String strBatchIdNew = rowCounterLot.getBatchId() + "";
            String strLotNew = rowCounterLot.getLotNumber() + "";
            String strItemIdNew = rowCounterLot.getInventoryItemId() + "";
            String strControlNew = rowCounterLot.getControl() + "";
            if (strBatchIdNew.equals(p_strBatchId) && 
                strLotNew.equals(p_strLotNumber) && 
                strItemIdNew.equals(p_inventoryId) && 
                strControlNew.equals(p_strControl)) {
                rowCounterLot.setSingleselection("Y");
                i++;
                break;
            }
        }
        rowIteratorLot.closeRowSetIterator();
       /* if (i > 0)
            System.out.println("Retained Selection");
        else
            System.out.println("Could not retain selection");*/
//        System.out.println("AM retainSelection exit");
        return i;
    }

    /**
     * To loop through table and return LPNs to issue 
     * @return HashMap hmRet
     */
    public  HashMap issueLPN() {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: issueLPN", 
                                  OAFwkConstants.STATEMENT);
//        System.out.println("AM issueLPN entry");

        String strBatchId = null;
        String strOrgId = null;
        String strInvItemId = null;
        String strPriQty = null;
        String strSecQty = null;
        String strLocatorId = null;
        String strSubInv = null;
        String strLotNo = null;
        String strBatchNo = null;
        String strOrgCode = null;
        String strLinoNo = null;
        String strLotCtrlCode = null;
        String strLpnId = null;
        String strLpn = null;
        String strUom = null;
        String strRvId = null;
        int intCounter = 0;

        // get LPN details
        XXNUCBilletIssueLotLPNVOImpl xxnucLPNVO = 
            getXXNUCBilletIssueLotLPNVO1();
        RowSetIterator rowIteratorLpn = 
            xxnucLPNVO.createRowSetIterator("selected");
        int intSizeLpn = rowIteratorLpn.getRowCount();
        rowIteratorLpn.setRangeStart(0);
        rowIteratorLpn.setRangeSize(intSizeLpn);
        Vector vcMsgs = new Vector(intSizeLpn);
        for (int i = 0; i <= intSizeLpn - 1; i++) {
            OAViewRowImpl rowCounterLpn = 
                (OAViewRowImpl)rowIteratorLpn.getRowAtRangeIndex(i);
            if (rowCounterLpn.getAttribute("Checkswitch") != null && 
                !rowCounterLpn.getAttribute("Checkswitch").equals("null") && 
                !(rowCounterLpn.getAttribute("Checkswitch") + "").equals("") && 
                rowCounterLpn.getAttribute("Checkswitch").equals("checkY")) {
                intCounter++;
                strBatchId = rowCounterLpn.getAttribute("BatchId") + "";
                strOrgId = rowCounterLpn.getAttribute("OrganizationId") + "";
                strBatchNo = rowCounterLpn.getAttribute("BatchNo") + "";
                strLotNo = rowCounterLpn.getAttribute("LotNumber") + "";
                strOrgCode = 
                        rowCounterLpn.getAttribute("OrganizationCode") + "";
                strInvItemId = 
                        rowCounterLpn.getAttribute("InventoryItemId") + "";
                strUom = rowCounterLpn.getAttribute("Uom") + "";
                strLocatorId = rowCounterLpn.getAttribute("LocatorId") + "";
                strPriQty = 
                        rowCounterLpn.getAttribute("PrimaryReservationQuantity") + 
                        "";
                strSecQty = 
                        rowCounterLpn.getAttribute("SecondaryReservationQuantity") + 
                        "";
                strSubInv = 
                        rowCounterLpn.getAttribute("SubinventoryCode") + "";
                strLinoNo = rowCounterLpn.getAttribute("LineNo") + "";
                strLotCtrlCode = 
                        rowCounterLpn.getAttribute("LotControlCode") + "";
                strLpnId = rowCounterLpn.getAttribute("LpnId") + "";
                strLpn = rowCounterLpn.getAttribute("LicensePlateNumber") + "";
                strRvId = rowCounterLpn.getAttribute("ReservationId") + "";

                /*System.out.println("strBatchNo " + strBatchNo + " strLinoNo " + 
                                   strLinoNo + " strLpnId " + strLpnId + 
                                   " strLocatorId " + strLocatorId + 
                                   " strOrgId " + strOrgId + " strOrgCode " + 
                                   strOrgCode + " strInvItemId " + 
                                   strInvItemId + " strUom " + strUom + 
                                   " strSubInv " + strSubInv + 
                                   " strLotCtrlCode " + strLotCtrlCode + 
                                   " strLotNo " + strLotNo + " strPriQty " + 
                                   strPriQty + " strSecQty " + strSecQty + 
                                   " strBatchId " + strBatchId + " strRvId " + 
                                   strRvId);*/

                String strRet = 
                    do_issue(strBatchNo, strLinoNo, strLpnId, strLocatorId, 
                             strOrgId, strOrgCode, strInvItemId, strUom, 
                             strSubInv, strLotCtrlCode, strLotNo, strPriQty, 
                             strSecQty, strBatchId, strRvId);

                if (strRet.equalsIgnoreCase("success"))
                    vcMsgs.addElement("Issued LPN " + strLpn + " from batch " + 
                                      strBatchNo);
                else
                    vcMsgs.addElement("Unable to Issue LPN " + strLpn + 
                                      " Error: " + strRet);
            }
        }
        rowIteratorLpn.closeRowSetIterator();

        HashMap hmRet = new HashMap();
        hmRet.put("Looped", intCounter);
        hmRet.put("Msgs", vcMsgs);
//        System.out.println("AM issueLPN exit");
        return hmRet;
    }

    /**
     * To loop through table and get the item lpns to reserve
     * @return HashMap hmRet
     */
    public HashMap reserveItem() {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: reserveItem", 
                                  OAFwkConstants.STATEMENT);
//        System.out.println("AM reserveItem entry");

        // get batch details
        XXNUCBilletIssueBatchDetailsVOImpl xxLotVO = 
            getXXNUCBilletIssueBatchDetailsVO1();
        XXNUCBilletIssueBatchDetailsVORowImpl xxLotRow = 
            (XXNUCBilletIssueBatchDetailsVORowImpl)xxLotVO.getRowAtRangeIndex(0);
        String p_batch_id = xxLotRow.getBatchId() + "";
        String p_org_id = xxLotRow.getOrganizationId() + "";
        String p_oprn_no = xxLotRow.getOprnNo();
        String p_batchstep_no = xxLotRow.getBatchstepNo() + "";
        String p_org_code = xxLotRow.getOrganizationCode();
        String p_batch_no = xxLotRow.getBatchNo();

        /*  RowSetIterator rowIteratorLot =
            xxnucLotVO.createRowSetIterator("selected");
        int intSizeLot = rowIteratorLot.getRowCount();
        rowIteratorLot.setRangeStart(0);
        rowIteratorLot.setRangeSize(intSizeLot);
        for (int i = 0; i <= intSizeLot - 1; i++) {
            OAViewRowImpl rowCounterLot =
                (OAViewRowImpl)rowIteratorLot.getRowAtRangeIndex(i);
            if (rowCounterLot.getAttribute("Singleselection") != null &&
                rowCounterLot.getAttribute("Singleselection").equals("Y")) {
                p_batch_id = rowCounterLot.getAttribute("BatchId") + "";
                System.out.println(" p_batch_id after getting row from LOTVO" +
                                   p_batch_id);
                p_org_id = rowCounterLot.getAttribute("OrganizationId") + "";
                p_oprn_no = rowCounterLot.getAttribute("OprnNo") + "";
                p_batchstep_no =
                        rowCounterLot.getAttribute("BatchstepNo") + "";
                p_org_code =
                        rowCounterLot.getAttribute("OrganizationCode") + "";
                p_batch_no = rowCounterLot.getAttribute("BatchNo") + "";

            }
        }
        rowIteratorLot.closeRowSetIterator();*/

        // get item details
        XXNUCBilletIssueAddItemVOImpl xxnucItemsVO = 
            getXXNUCBilletIssueAddItemVO1();
        int i = 0;
        int x = 0;
        String strResult = "";
        String p_issue_qty = null;
        String p_item_id = null;
        String p_locator_id = null;
        String p_subinv_code = null;
        String p_uom = null;
        String p_lot_no = null;
        String strSegment1 = null;
        String strAvailQty = null;
        String strYield = null; // sft-869
        
        RowSetIterator rowIteratorLPN = 
            xxnucItemsVO.createRowSetIterator("selected");
        int intSizeLPN = rowIteratorLPN.getRowCount();
//        System.out.println("Numbber of rows for items is " + intSizeLPN);
        rowIteratorLPN.setRangeStart(0);
        rowIteratorLPN.setRangeSize(1); // always 1 row
        Vector vcMsgs = new Vector(intSizeLPN);

        OAViewRowImpl rowCounterLPN = 
            (OAViewRowImpl)rowIteratorLPN.getRowAtRangeIndex(0);
        if (rowCounterLPN.getAttribute("Segment1") == null || 
            rowCounterLPN.getAttribute("Segment1").equals("")) {
            x++;
//            System.out.println("null values in row " + x);
        } // for null
        else if (rowCounterLPN.getAttribute("Segment1") != null || 
                 !rowCounterLPN.getAttribute("Segment1").equals("")) {
            strSegment1 = rowCounterLPN.getAttribute("Segment1") + "";
            if (rowCounterLPN.getAttribute("LocatorId") == null || 
                rowCounterLPN.getAttribute("LocatorId").equals("")) {
                vcMsgs.add("Please provide a Locator against item " + 
                           strSegment1);

            }
            strAvailQty = rowCounterLPN.getAttribute("ActualQty") + "";
            p_issue_qty = rowCounterLPN.getAttribute("IssueQty") + "";
            p_item_id = rowCounterLPN.getAttribute("ItemId") + "";
            p_locator_id = rowCounterLPN.getAttribute("LocatorId") + "";
            p_subinv_code = rowCounterLPN.getAttribute("SubinvCode") + "";
            p_uom = rowCounterLPN.getAttribute("Uom") + "";
            strYield = rowCounterLPN.getAttribute("ContributeToYield")+""; // sft-869
            if (rowCounterLPN.getAttribute("LotNo") + "" != null || 
                !rowCounterLPN.getAttribute("LotNo").equals(""))
                p_lot_no = rowCounterLPN.getAttribute("LotNo") + "";
            // get LPNs
            XXNUCBilletIssueItemLotLPNVOImpl xxnucItemLotLPNVO = 
                getXXNUCBilletIssueItemLotLPNVO1();
            int intSizeLpn = xxnucItemLotLPNVO.getRowCount();
            RowSetIterator rowIteratorLpn = 
                xxnucItemLotLPNVO.createRowSetIterator("checked");
            rowIteratorLpn.setRangeStart(0);
            rowIteratorLpn.setRangeSize(intSizeLpn);
            for (int k = 0; k <= intSizeLpn - 1; k++) {
                OAViewRowImpl rowCounterLpn = 
                    (OAViewRowImpl)rowIteratorLpn.getRowAtRangeIndex(k);
                if (rowCounterLpn.getAttribute("MultiSelect") != null && 
                    rowCounterLpn.getAttribute("MultiSelect").equals("checked")) {
                    i++;
                    String p_lpn_id = rowCounterLpn.getAttribute("LpnId") + "";
                    String p_lpn_no = 
                        rowCounterLpn.getAttribute("LicensePlateNumber") + "";
                    /*System.out.println("p_batch_id " + p_batch_id + 
                                       " p_batchstep_no " + p_batchstep_no + 
                                       " p_issue_qty " + p_issue_qty + 
                                       " p_item_id " + p_item_id + 
                                       " p_org_id " + p_org_id + 
                                       " p_oprn_no " + p_oprn_no + 
                                       " p_locator_id " + p_locator_id + 
                                       " p_subinv_code " + p_subinv_code + 
                                       " p_uom " + p_uom + " p_lot_no " + 
                                       p_lot_no + " p_batch_no " + p_batch_no + 
                                       " p_org_code " + p_org_code + 
                                       " strAvailQty " + strAvailQty + 
                                       " p_lpn_id " + p_lpn_id);*/
                    strResult = 
                            addItem(p_batch_id, p_batchstep_no, p_item_id, p_org_id, 
                                    p_oprn_no, p_locator_id, p_subinv_code, 
                                    p_uom, p_lot_no, p_batch_no, p_org_code, 
                                    p_lpn_id, 
                                    strYield); // sft-869

                    if (strResult.equalsIgnoreCase("Success"))
                        vcMsgs.add("Reserved LPN " + p_lpn_no + " for Item " + 
                                   strSegment1 + " to Batch " + p_batch_no + 
                                   " in lot " + p_lot_no);

                    else
                        vcMsgs.add("Failed to issue Item " + strSegment1 + 
                                   " with error " + strResult);
                }

            } // end of inner k loop
            rowIteratorLpn.closeRowSetIterator();
        }
        //        rowIteratorLot.closeRowSetIterator();

        HashMap hmRet = new HashMap();
        hmRet.put("looped", i);
        hmRet.put("messages", vcMsgs);
//        System.out.println("AM reserveItem exit");
        return hmRet;
    }

    /**
     * Initializes VO
     * @param p_strInvId
     * @param p_strLotNo
     * @param p_strLocatorId
     * @param p_strOrgId
     */
    public void initItemLotLPNVO(String p_strInvId, String p_strLotNo, 
                                 String p_strLocatorId, String p_strOrgId, 
                                 String p_strSubInv) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: initItemLotLPNVO: "+p_strInvId+" "+ p_strLotNo+" "+p_strLocatorId+" "+
                                  p_strOrgId+" "+p_strSubInv, 
                                  OAFwkConstants.STATEMENT);
//        System.out.println("AM initItemLotLPNVO entry: p_strInvId = " + p_strInvId + ", p_strLotNo = " + p_strLotNo + ", p_strLocatorId = " + p_strLocatorId + ", p_strOrgId = " + p_strOrgId + ", p_strSubInv = " + p_strSubInv);
        XXNUCBilletIssueItemLotLPNVOImpl xxnucItemLotLPNVO = 
            getXXNUCBilletIssueItemLotLPNVO1();
        xxnucItemLotLPNVO.initQuery(p_strInvId, p_strLotNo, p_strLocatorId, 
                                    p_strOrgId, p_strSubInv);
//        System.out.println("AM initItemLotLPNVO exit");
    }


    /**
     * Get new process ID from sequence
     * @return l_processStr
     */
    public String getProcessId() {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: getProcessId", 
                                  OAFwkConstants.STATEMENT);
//        System.out.println("AM getProcessId entry");
        oracle.jbo.domain.Number l_ProcessId = 
            getOADBTransaction().getSequenceValue("XXNUC_INV_LOV_DETAILS_S");
        String l_processStr = l_ProcessId.stringValue();
//        System.out.println("AM getProcessId exit");
        return l_processStr;
    }

    /**
     * Removes numpad cached values from db table
     * @param p_strProcessId
     * @return l_return
     */
    public void removeProcessId(String p_strProcessId) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: removeProcessId: "+p_strProcessId, 
                                  OAFwkConstants.STATEMENT);
//        System.out.println("AM removeProcessId entry");
        OADBTransaction txn = getOADBTransaction();
        String l_stmt = 
            "DELETE FROM xxnuc_inv_lov_details WHERE process_id =" + 
            p_strProcessId;
        Statement localOraclePreparedStatement = txn.createStatement(1);
        try {
            localOraclePreparedStatement.executeUpdate(l_stmt);
//            System.out.println("deleted records");
            txn.commit();
        } catch (Exception e) {
                e.printStackTrace();
//            System.out.println(e.toString());
//            System.out.println("AM removeProcessId exit");
        }
        finally {
                   try {
                       if (localOraclePreparedStatement != null)
                           localOraclePreparedStatement.close();
                   } catch (Exception e) {
                       e.printStackTrace();
                   }
               }
               
//        System.out.println("AM removeProcessId exit");
    }

    /**
     * For setting Return URL For Numberpad
     * @param pProcessId
     * @param pString2
     * @param pString3
     * @param l_quantity
     * @param l_uom
     * @return l_errBuf
     */
    public String setReturnUrl(String pProcessId, String pString2, 
                               String pString3, String l_quantity, 
                               String l_uom) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: setReturnUrl: "+pProcessId+" "+pString2+" "+pString3+" "+l_quantity+" "+l_uom, 
                                  OAFwkConstants.STATEMENT);
        String l_errCode = "0";
        String l_errBuf = "SUCCESS";
        OADBTransaction txn = getOADBTransaction();
        Object localObject = 
            "OA.jsp?page=/xxnuc/oracle/apps/inv/billetissue/webui/XXNUCBilletIssuePG&retainAM=Y&LOV_TYPE=" + 
            pString2 + "_NUMBER_PAD&RESPONSE=Y&ROW_KEY=" + pString3 + 
            "&PROCESS_ID=" + pProcessId;
        OracleCallableStatement oraclecallablestatement = null;
        try {
            int l_intProcessId = Integer.parseInt(pProcessId);

//            System.out.println("building PL/SQL block for xxnuc_inv_matdet_pkg.populate_lov_details");
            StringBuffer str = new StringBuffer();

            str.append(" BEGIN ");
            str.append(" XXNUC_INV_CHARGE_EAF_PKG.populate_lov_details( ");
            str.append("       p_process_id    => :1, ");
            str.append("       p_attribute_type     => :2, ");
            str.append("       p_attribute_name      => :3, ");
            str.append("       p_attribute_value       => :4, ");
            str.append("       p_err_code      => :5, ");
            str.append("       p_err_buf      => :6 ");
            str.append("    ); ");
            str.append(" END; ");

//            System.out.println("creating callable statement");
            oraclecallablestatement = 
                (OracleCallableStatement)txn.createCallableStatement(str.toString(), 
                                                                     1);

            oraclecallablestatement.setInt(1, l_intProcessId);
            oraclecallablestatement.setString(2, "REQUEST");
            oraclecallablestatement.setString(3, "RETURN_URL");
            oraclecallablestatement.setString(4, (String)localObject);
            oraclecallablestatement.registerOutParameter(5, 12);
            oraclecallablestatement.registerOutParameter(6, 12);

//            System.out.println("Executing PL/SQL block");
//            System.out.println("for " + l_intProcessId + 
//                               " REQUEST, RETURN_URL, (String)localObject " + 
//                               (String)localObject);
            oraclecallablestatement.execute();

            l_errCode = oraclecallablestatement.getString(5) + "";
            l_errBuf = oraclecallablestatement.getString(6) + "";

            oraclecallablestatement.setInt(1, l_intProcessId);
            oraclecallablestatement.setString(2, "REQUEST");
            oraclecallablestatement.setString(3, "FIELD_ID");
            oraclecallablestatement.setString(4, pString3);
            oraclecallablestatement.registerOutParameter(5, 12);
            oraclecallablestatement.registerOutParameter(6, 12);

//            System.out.println("Executing PL/SQL block");
//            System.out.println("for " + l_intProcessId + 
//                               " REQUEST, FIELD_ID, pString3 " + pString3);
            oraclecallablestatement.execute();

            l_errCode = oraclecallablestatement.getString(5) + "";
            l_errBuf = oraclecallablestatement.getString(6) + "";

            oraclecallablestatement.setInt(1, l_intProcessId);
            oraclecallablestatement.setString(2, "REQUEST");
            oraclecallablestatement.setString(3, "FIELD_VALUE");
            oraclecallablestatement.setString(4, l_quantity);
            oraclecallablestatement.registerOutParameter(5, 12);
            oraclecallablestatement.registerOutParameter(6, 12);

//            System.out.println("Executing PL/SQL block");
//            System.out.println("for " + l_intProcessId + 
//                               " REQUEST, FIELD_VALUE, l_quantity " + 
//                               l_quantity);
            oraclecallablestatement.execute();

            l_errCode = oraclecallablestatement.getString(5) + "";
            l_errBuf = oraclecallablestatement.getString(6) + "";

            oraclecallablestatement.setInt(1, l_intProcessId);
            oraclecallablestatement.setString(2, "REQUEST");
            oraclecallablestatement.setString(3, "FIELD_UOM");
            oraclecallablestatement.setString(4, l_uom);
            oraclecallablestatement.registerOutParameter(5, 12);
            oraclecallablestatement.registerOutParameter(6, 12);

//            System.out.println("Executing PL/SQL block");
//            System.out.println("for" + l_intProcessId + 
//                               " REQUEST, FIELD_UOM, l_uom " + l_uom);
            oraclecallablestatement.execute();

            l_errCode = oraclecallablestatement.getString(5) + "";
            l_errBuf = oraclecallablestatement.getString(6) + "";

            oraclecallablestatement.setInt(1, l_intProcessId);
            oraclecallablestatement.setString(2, "REQUEST");
            oraclecallablestatement.setString(3, "FIELD_PROMPT");
            oraclecallablestatement.setString(4, pString2);
            oraclecallablestatement.registerOutParameter(5, 12);
            oraclecallablestatement.registerOutParameter(6, 12);

//            System.out.println("Executing PL/SQL block**");
//            System.out.println("for " + l_intProcessId + 
//                               " REQUEST, FIELD_PROMPT, pString2 " + pString2);
            oraclecallablestatement.execute();

            l_errCode = oraclecallablestatement.getString(5) + "";
            l_errBuf = oraclecallablestatement.getString(6) + "";
            if(oraclecallablestatement != null)
                oraclecallablestatement.close();
        } catch (Exception e) {
            l_errBuf = "Exception in setReturnUrl" + e.getMessage();
        }
        finally {
                   try {
                       if (oraclecallablestatement != null)
                           oraclecallablestatement.close();
                   } catch (Exception e) {
                       e.printStackTrace();
                   }
               }
        getTransaction().commit();
        return l_errBuf;
    }

    /**
     * Handle to get value from numpad page
     * @param pProcessId
     * @param pLovType
     * @param pFieldId
     * @param pFlag
     * @return
     */
    public String refreshNumPad(String pProcessId, String pLovType, 
                                String pFieldId, String pFlag) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: refreshNumPad: "+pProcessId+" "+pLovType+" "+pFieldId+" "+pFlag, 
                                  OAFwkConstants.STATEMENT);
//        System.out.println("entering into paramRefreshNumberPad");
        String errBuf = "SUCCESS";
        String l_fieldValue = "";
        OraclePreparedStatement localOraclePreparedStatement = null;
        try {
            OADBTransaction txn = getOADBTransaction();
            String l_stmt = 
                "select attribute_name, attribute_value from xxnuc_inv_lov_details where process_id = :1 and attribute_type = :2 and attribute_name = :2";
            localOraclePreparedStatement = 
                (OraclePreparedStatement)txn.createPreparedStatement(l_stmt, 
                                                                     1);
            int l_intProcessId = Integer.parseInt(pProcessId);
            localOraclePreparedStatement.setInt(1, l_intProcessId);
            localOraclePreparedStatement.setString(2, "RESPONSE");
            localOraclePreparedStatement.setString(3, "FIELD_VALUE");
            OracleResultSet localOracleResultSet = 
                (OracleResultSet)localOraclePreparedStatement.executeQuery();
            while (localOracleResultSet.next()) {
//                System.out.println("localOracleResultSet.getString(1)" + 
//                                   localOracleResultSet.getString(1));
//                System.out.println("localOracleResultSet.getString(2)" + 
//                                   localOracleResultSet.getString(2));
                l_fieldValue = localOracleResultSet.getString(2);
            }
            if(localOraclePreparedStatement != null)
                localOraclePreparedStatement.close();

            if (null!=pFieldId && !pFieldId.equalsIgnoreCase("Y")) // reservation sft 933
            { System.out.println("entered here");
                if (pFlag == "REGION") {
                    Row[] arrayOfRow = 
                        getXXNUCBilletIssueAddItemVO1().getAllRowsInRange();
//                    System.out.println("handleNumberPad 2");
                    for (int i = 0; i < arrayOfRow.length; i++) {
//                        System.out.println("Inside for loop");
                        XXNUCBilletIssueAddItemVORowImpl localMaterialDetailsVORowImpl = 
                            (XXNUCBilletIssueAddItemVORowImpl)arrayOfRow[i];
                        if (localMaterialDetailsVORowImpl.getSegment1().equals(pFieldId)) {
//                            System.out.println("Field Found" + pFieldId);
                            if ("QUANTITY".equals(pLovType)) {
                                Number l_quantity = null;
                                int l_intFieldValue = 0;
//                                System.out.println("before if condition");
                                if (l_fieldValue != null) {
                                    l_intFieldValue = 
                                            Double.valueOf(l_fieldValue).intValue();
//                                    System.out.println(l_intFieldValue + 
//                                                       "= l_intFieldValue");
                                    if (l_intFieldValue > 0)
                                        l_quantity = 
                                                new Number(l_intFieldValue);
                                }
//                                System.out.println("setting l_quantity in 1st IF" + 
//                                                   l_quantity);
                                localMaterialDetailsVORowImpl.setAttribute("IssueQty", 
                                                                           l_quantity);
                            }
                        }
                    }
                } else {
                    Row[] arrayOfRow = 
                        getXXNUCBilletIssueAddItemVO1().getAllRowsInRange();
//                    System.out.println("handleNumberPad 2");
                    for (int i = 0; i < arrayOfRow.length; i++) {
//                        System.out.println("Inside for loop");
                        XXNUCBilletIssueAddItemVORowImpl localMaterialDetailsVORowImpl = 
                            (XXNUCBilletIssueAddItemVORowImpl)arrayOfRow[i];
                        if (localMaterialDetailsVORowImpl.getSegment1().equals(pFieldId)) {
//                            System.out.println("Field Found" + pFieldId);
                            if ("QUANTITY".equals(pLovType)) {
                                Number l_quantity = null;
                                int l_intFieldValue;
//                                System.out.println("before if condition");
                                if (l_fieldValue != null) {
                                    l_intFieldValue = 
                                            Double.valueOf(l_fieldValue).intValue();
                                    l_quantity = new Number(l_intFieldValue);
                                }
//                                System.out.println("setting l_quantity in 2nd IF" + 
//                                                   l_quantity);
                                localMaterialDetailsVORowImpl.setAttribute("IssueQty", 
                                                                           l_quantity);
                            }
                        }
                    }
                }
            } else // batchLot
            {
                if (pFlag == "REGION") {
                    Row[] arrayOfRow = 
                        getXXNUCBilletIssueBatchLotVO1().getAllRowsInRange();
//                    System.out.println("handleNumberPad 2");
                    for (int i = 0; i < arrayOfRow.length; i++) {
//                        System.out.println("Inside for loop");
                        XXNUCBilletIssueBatchLotVORowImpl localMaterialDetailsVORowImpl = 
                            (XXNUCBilletIssueBatchLotVORowImpl)arrayOfRow[i];
                        if (localMaterialDetailsVORowImpl.getSingleselection().equals(pFieldId)) {
//                            System.out.println("Field Found" + pFieldId);
                            if ("QUANTITY".equals(pLovType)) {
                                Number l_quantity = null;
                                int l_intFieldValue;
//                                System.out.println("before if condition");
                                if (l_fieldValue != null) {
                                    l_intFieldValue = 
                                            Double.valueOf(l_fieldValue).intValue();
                                    l_quantity = new Number(l_intFieldValue);
                                }
//                                System.out.println("setting l_quantity in 1st IF" + 
//                                                   l_quantity);
                                localMaterialDetailsVORowImpl.setAttribute("Issueqty", 
                                                                           l_quantity);
                            }
                        }
                    }
                } else {
                    Row[] arrayOfRow = 
                        getXXNUCBilletIssueBatchLotVO1().getAllRowsInRange();
//                    System.out.println("handleNumberPad 2");
                    for (int i = 0; i < arrayOfRow.length; i++) {
//                        System.out.println("Inside for loop");
                        XXNUCBilletIssueBatchLotVORowImpl localMaterialDetailsVORowImpl = 
                            (XXNUCBilletIssueBatchLotVORowImpl)arrayOfRow[i];
                        if (localMaterialDetailsVORowImpl.getSingleselection() != 
                            null && 
                            localMaterialDetailsVORowImpl.getSingleselection().toString().equals(pFieldId)) {
//                            System.out.println("Field Found" + pFieldId);
                            if ("QUANTITY".equals(pLovType)) {
                                Number l_quantity = null;
                                int l_intFieldValue;
//                                System.out.println("before if condition");
                                if (l_fieldValue != null) {
                                    l_intFieldValue = 
                                            Double.valueOf(l_fieldValue).intValue();
                                    l_quantity = new Number(l_intFieldValue);
                                }
//                                System.out.println("setting l_quantity in 2nd IF" + 
//                                                   l_quantity);
                                localMaterialDetailsVORowImpl.setAttribute("Issueqty", 
                                                                           l_quantity);
                            }
                        }
                    }
                }
            }
//            System.out.println("Completed handleNumberPad");
        } catch (Exception localSQLException) {
            localSQLException.printStackTrace();
//            System.out.println("Exception occurrend in handleNumberPad");
        } finally {
            removeProcessId(pProcessId); // clean 
                        try {
                            if (localOraclePreparedStatement != null)
                                localOraclePreparedStatement.close();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
        }
        return errBuf;
    }

    /**
     * Get converted weight
     * @param pItemId
     * @param pOrgId
     * @param pWeight
     * @param pUom
     * @param lUom
     * @return
     */
    public String inv_convert(String pItemId, String pOrgId, String pWeight, 
                              String pUom, String lUom) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: inv_convert: "+pItemId+" "+pOrgId+" "+pWeight+" "+pUom+" "+lUom, 
                                  OAFwkConstants.STATEMENT);
//        System.out.println("Entry inv_convert");

        OADBTransaction txn = getOADBTransaction();
        PreparedStatement preparedstatement = null;
        ResultSet resultset = null;
        OracleConnection connJdbc = (OracleConnection)txn.getJdbcConnection();
        String strWeight = null;
        String stmt = 
            " select inv_convert.inv_um_convert(" + " item_id => :1, " + 
            " organization_id => :2," + " precision => 5," + 
            " from_quantity => :3," + " from_unit => :4," + " to_unit => :5," + 
            " from_name => NULL," + " to_name => NULL) weight" + 
            "    from dual";

        try {
            preparedstatement = connJdbc.prepareStatement(stmt);

            preparedstatement.setInt(1, Integer.parseInt(pItemId));
            preparedstatement.setInt(2, Integer.parseInt(pOrgId));
            preparedstatement.setFloat(3, Float.parseFloat(pWeight));
            preparedstatement.setString(4, pUom);
            preparedstatement.setString(5, lUom);

            for (resultset = preparedstatement.executeQuery(); 
                 resultset.next(); ) {
                strWeight = resultset.getString("Weight");
            }
            if(preparedstatement != null)
                preparedstatement.close();
                
//            System.out.println("Weight : " + strWeight);

            if (strWeight != null && "-99999".equals(strWeight))
                strWeight = "0";
//            System.out.println("Exit inv_convert");
            return strWeight;
        } catch (Exception ex) {
            ex.printStackTrace();
//            System.out.println("Exit inv_convert");
            return "0";
        }
        finally {
                   try {
                       if (preparedstatement != null)
                           preparedstatement.close();
                   } catch (Exception e) {
                       e.printStackTrace();
                   }
               }
    }

    /**
     * Gets the sum of issued lpn quantity
     * @param strUomCode
     * @return
     */
    public String getTotalIssuedQty(String strUomCode) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: getTotalIssuedQty: "+strUomCode, 
                                  OAFwkConstants.STATEMENT);
//        System.out.println("Entry getTotalIssuedQty");
        Float fCountP = 0.0f;
        XXNUCBilletIssueLPNListingVOImpl lpnVO = 
            getXXNUCBilletIssueLPNListingVO1();
        int intSize = lpnVO.getRowCount();
        RowSetIterator rowIterator = lpnVO.createRowSetIterator("all");
        rowIterator.setRangeStart(0);
        rowIterator.setRangeSize(intSize);
        for (int i = 0; i <= intSize - 1; i++) {
            XXNUCBilletIssueLPNListingVORowImpl rowCounter = 
                (XXNUCBilletIssueLPNListingVORowImpl)rowIterator.getRowAtRangeIndex(i);
            {
                String strUom = rowCounter.getTransactionUom();
                if (!strUom.equals(strUomCode)) {
                    Float fP = 
                        Float.parseFloat(inv_convert(rowCounter.getInventoryItemId().toString(), 
                                                     rowCounter.getOrganizationId().toString(), 
                                                     rowCounter.getTransactionQuantity().toString(), 
                                                     strUom, strUomCode));
                    fCountP = fCountP + fP;
                } else
                    fCountP = 
                            fCountP + Float.parseFloat(rowCounter.getTransactionQuantity().toString());

            }
        }
        lpnVO.closeRowSetIterator();
//        System.out.println("Exit getTotalIssuedQty");
        return fCountP.toString();
    }

    /**
     * Initialize organization
     * @param val
     */
    public void initOrg(String val) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: initOrg: "+val, 
                                  OAFwkConstants.STATEMENT);
        XXNUCBilletIssueOrgVOImpl vo = getXXNUCBilletIssueOrgVO1();
        vo.clearCache();
        if (val.equals("X"))
            vo.setWhereClauseParam(0, null);
        else
            vo.setWhereClauseParam(0, val);
        vo.executeQuery();
    }

/**
     * Relieve reserved LPN
     * @return HashMap
     */
 /*   public HashMap relieveLPN() {
        System.out.println("AM returnLPN entry");

        String strPriQty = null;
        String strSecQty = null;
        String strBatchNo = null;
        String strLpn = null;
        String strRvId = null;
        int intCounter = 0;

        // get LPN details
        XXNUCBilletIssueLotLPNVOImpl xxnucLPNVO = 
            getXXNUCBilletIssueLotLPNVO1();
        RowSetIterator rowIteratorLpn = 
            xxnucLPNVO.createRowSetIterator("selected");
        int intSizeLpn = rowIteratorLpn.getRowCount();
        rowIteratorLpn.setRangeStart(0);
        rowIteratorLpn.setRangeSize(intSizeLpn);
        Vector vcMsgs = new Vector(intSizeLpn);
        for (int i = 0; i <= intSizeLpn - 1; i++) {
            XXNUCBilletIssueLotLPNVORowImpl rowCounterLpn = 
                (XXNUCBilletIssueLotLPNVORowImpl)rowIteratorLpn.getRowAtRangeIndex(i);
            if (rowCounterLpn.getCheckswitch() != null && 
                !rowCounterLpn.getCheckswitch().equals("null") && 
                !(rowCounterLpn.getCheckswitch().equals("")) && 
                rowCounterLpn.getCheckswitch().equals("checkY")) {
                intCounter++;
                strPriQty = rowCounterLpn.getPrimaryReservationQuantity() + "";
                strSecQty = 
                        rowCounterLpn.getSecondaryReservationQuantity() + "";
                strRvId = rowCounterLpn.getReservationId() + "";
                strLpn = rowCounterLpn.getLicensePlateNumber();
                strBatchNo = rowCounterLpn.getBatchNo();
                
                System.out.println("strPriQty " + strPriQty + " strSecQty " + 
                                   strSecQty + " strRvId " + strRvId);

                String strRet = do_Relieve(strPriQty, strSecQty, strRvId);

                if (strRet.equalsIgnoreCase("success"))
                    vcMsgs.addElement("Relieved LPN " + strLpn + 
                                      " from batch " + strBatchNo);
                else
                    vcMsgs.addElement("Unable to Relieve LPN " + strLpn + 
                                      " Error: " + strRet);
            }
        }
        rowIteratorLpn.closeRowSetIterator();

        HashMap hmRet = new HashMap();
        hmRet.put("Looped", intCounter);
        hmRet.put("Msgs", vcMsgs);
        System.out.println("AM returnLPN exit");
        return hmRet;
    }
*/
/**
     * Call PL/SQL procedure to relieve reservation
     * @param p_pri_qty
     * @param p_sec_qty
     * @param p_reservation_id
     * @return String message
     */
 /*   public String do_Relieve(String p_pri_qty, String p_sec_qty, 
                             String p_reservation_id) {

        OADBTransaction txn = getOADBTransaction();
        String strRet = "Success";
        OracleCallableStatement issueCall = null;
        int strCode = -1;
        String errcode = null;
        String errbuff = null;
        issueCall = 
                (OracleCallableStatement)txn.createCallableStatement("begin xxnuc_inv_billet_issue_pkg.relieve_reservation(:1,:2,:3,:4,:5); end;", 
                                                                     1);

        try {
            System.out.println("Setting input");
            issueCall.registerOutParameter(1, Types.VARCHAR);
            issueCall.registerOutParameter(2, Types.VARCHAR);
            issueCall.setFloat(3, Float.parseFloat(p_pri_qty));
            issueCall.setFloat(4, Float.parseFloat(p_sec_qty));
            issueCall.setString(5, p_reservation_id);
            System.out.println("Executing");
            issueCall.execute();
            System.out.println("Added");
            errcode = issueCall.getString(1);
            errbuff = issueCall.getString(2);
            System.out.println("Done");
        } catch (Exception e) {
            strCode = 2;
            strRet = e.toString();
            System.out.println("AM relieve Exit In exception: strCode " + 
                               strCode + " strRet " + strRet);
            return strRet;
        } finally {
            try {
                if (issueCall != null)
                    issueCall.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (!errcode.equals("0"))
            strRet = errbuff;
        else if (errcode == null)
            strRet = "Unavoidable error";
        else
            strRet = "Success";

        System.out.println("AM relieve Exit : strRet " + strRet + " errcode " + 
                           errcode);
        return strRet;
    }
*/
/**
     * Get LPNs selected for Return
     * @return
     */
    public HashMap returnLPN() {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: returnLPN", 
                                  OAFwkConstants.STATEMENT);
        XXNUCBilletIssueLPNListingVOImpl vo = 
            getXXNUCBilletIssueLPNListingVO1();
        String strRet = null;
        int intCounter = 0;
        String batch_no = "";
        Number line_no = new Number();
        String lpn = "";
        Number lpn_id = new Number();
        String locator = "";
        Number locator_id = new Number();
        Number organization_id = new Number();
        String organization_code = "";
        Number inventory_item_id = new Number();
        String dtl_um = "";
        String subinventory_code = "";
        Number lot_control_code = new Number();
        String lot_no = "";
        Number quantity = new Number();
        Number secQuantity = new Number();
        String secUOM = "";
        Number batch_id = new Number();
        Number OrigTrxQty = new Number();

        RowSetIterator rowIteratorLpn = vo.createRowSetIterator("selected");
        int intSizeLpn = rowIteratorLpn.getRowCount();
        rowIteratorLpn.setRangeStart(0);
        rowIteratorLpn.setRangeSize(intSizeLpn);
        Vector vcMsgs = new Vector(intSizeLpn);
        for (int i = 0; i <= intSizeLpn - 1; i++) {
            XXNUCBilletIssueLPNListingVORowImpl rowCounterLpn = 
                (XXNUCBilletIssueLPNListingVORowImpl)rowIteratorLpn.getRowAtRangeIndex(i);
            if (rowCounterLpn.getSelectFlag() != null && 
                rowCounterLpn.getSelectFlag().equalsIgnoreCase("Y")) {
                intCounter++;

                batch_no = rowCounterLpn.getBatchNo();
                line_no = rowCounterLpn.getLineNo();
                lpn = rowCounterLpn.getLicensePlateNumber();
                lpn_id = rowCounterLpn.getLpnId();
                locator = rowCounterLpn.getLocator();
                locator_id = rowCounterLpn.getLocatorId();
                organization_id = rowCounterLpn.getOrganizationId();
                organization_code = rowCounterLpn.getOrganizationCode();
                inventory_item_id = rowCounterLpn.getInventoryItemId();
                dtl_um = rowCounterLpn.getTransactionUom();
                subinventory_code = rowCounterLpn.getSubinventoryCode();
                lot_control_code = rowCounterLpn.getLotControlCode();
                lot_no = rowCounterLpn.getLotNumber();
                quantity = rowCounterLpn.getTransactionQuantity();
                secQuantity = rowCounterLpn.getSecondaryTransactionQuantity();
                secUOM = rowCounterLpn.getSecondaryUomCode();
                
                batch_id = rowCounterLpn.getBatchId();
                OrigTrxQty = rowCounterLpn.getOrigTrxQty();

                /*System.out.println("batch_no " + batch_no + " line_no " + 
                                   line_no + " lpn_id " + lpn_id + 
                                   " locator_id " + locator_id + 
                                   " organization_id " + organization_id + 
                                   " organization_code " + organization_code + 
                                   " inventory_item_id " + inventory_item_id + 
                                   " dtl_um " + dtl_um + 
                                   " subinventory_code " + subinventory_code + 
                                   " lot_control_code " + lot_control_code + 
                                   " lot_no " + lot_no + " quantity " + 
                                   quantity + " secQuantity " + secQuantity +
                                   " secUOM " + secUOM + " lpn " + lpn + " locator " + 
                                   locator + " OrigTrxQty " + OrigTrxQty);*/
                                   
                if (quantity.getValue() > OrigTrxQty.getValue()) {
                    vcMsgs.addElement("Unable to Return LPN " + lpn + 
                                      " Error: Material Return Quantity should not exceed Issued Quantity");
                    continue;
                }
                strRet = 
                        doReturn(batch_no, line_no, lpn_id, locator_id, organization_id, 
                                 organization_code, inventory_item_id, dtl_um, 
                                 subinventory_code, lot_control_code, lot_no, 
                                 quantity, secQuantity, secUOM, lpn, locator);
                if (strRet.equalsIgnoreCase("success"))
                    vcMsgs.addElement("Returned LPN " + lpn + " from batch " + 
                                      batch_no);
                else
                    vcMsgs.addElement("Unable to Return LPN " + lpn + 
                                      " Error: " + strRet);
            }
        }
        rowIteratorLpn.closeRowSetIterator();

        HashMap hmRet = new HashMap();
        hmRet.put("Looped", intCounter);
        hmRet.put("Msgs", vcMsgs);
//        System.out.println("AM returnLPN exit");
        return hmRet;
    }

/**
     * Call PL/SQL to return material
     * @param batch_no
     * @param line_no
     * @param lpn_id
     * @param locator_id
     * @param organization_id
     * @param organization_code
     * @param inventory_item_id
     * @param dtl_um
     * @param subinventory_code
     * @param lot_control_code
     * @param lot_no
     * @param quantity
     * @param lpn
     * @param locator
     * @return
     */
    public String doReturn(String batch_no, Number line_no, Number lpn_id, 
                           Number locator_id, Number organization_id, 
                           String organization_code, Number inventory_item_id, 
                           String dtl_um, String subinventory_code, 
                           Number lot_control_code, String lot_no, 
                           Number quantity, Number secQuantity, String secUOM,
                           String lpn, String locator) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletIssueAMImpl: doReturn: "+ batch_no +" "+ line_no +" "+ lpn_id 
                           +" "+ locator_id +" "+ organization_id 
                           +" "+ organization_code +" "+ inventory_item_id 
                           +" "+ dtl_um +" "+ subinventory_code 
                           +" "+ lot_control_code +" "+ lot_no 
                           +" "+ quantity +" "+ secQuantity +" "+ secUOM
                           +" "+ lpn +" "+ locator, 
                                  OAFwkConstants.STATEMENT);
        String errCode = "";
        String errBuf = "";
//        System.out.println("Started doMaterialReturn");
        OADBTransaction txn = getOADBTransaction();

//        System.out.println("Building PL/SQL block for calling XXNUC_INV_BUNDLEISSUE_OPM_PKG.material_return");
        StringBuffer str = new StringBuffer();

        str.append(" BEGIN ");
        str.append(" XXNUC_INV_BUNDLEISSUE_OPM_PKG.material_return( ");
        str.append("       p_batch_no    => :1, ");
        str.append("       p_line_no       => :2, ");
        str.append("       p_lpn_id       => :3, ");
        str.append("       p_locator_id       => :4, ");
        str.append("       p_organization_id       => :5, ");
        str.append("       p_organization_code       => :6, ");
        str.append("       p_inventory_item_id       => :7, ");
        str.append("       p_dtl_um       => :8, ");
        str.append("       p_subinventory_code       => :9, ");
        str.append("       p_lot_control_code       => :10, ");
        str.append("       p_lot_no       => :11, ");
        str.append("       p_quantity       => :12, ");
        str.append("       p_sec_qty       => :13, ");
        str.append("       p_sec_um       => :14, ");
        str.append("       p_lpn       => :15, ");
        str.append("       p_locator       => :16, ");
        str.append("       p_err_code       => :17, ");
        str.append("       p_err_buf       => :18 ");
        str.append("    ); ");
        str.append(" END; ");

        OracleCallableStatement oraclecallablestatement = 
            (OracleCallableStatement)txn.createCallableStatement(str.toString(), 
                                                                 1);

        try {
            oraclecallablestatement.setString(1, batch_no);
            oraclecallablestatement.setNUMBER(2, line_no);
            oraclecallablestatement.setNUMBER(3, lpn_id);
            oraclecallablestatement.setNUMBER(4, locator_id);
            oraclecallablestatement.setNUMBER(5, organization_id);
            oraclecallablestatement.setString(6, organization_code);
            oraclecallablestatement.setNUMBER(7, inventory_item_id);
            oraclecallablestatement.setString(8, dtl_um);
            oraclecallablestatement.setString(9, subinventory_code);
            oraclecallablestatement.setNUMBER(10, lot_control_code);
            oraclecallablestatement.setString(11, lot_no);
            oraclecallablestatement.setNUMBER(12, quantity);
            oraclecallablestatement.setNUMBER(13, secQuantity);
            oraclecallablestatement.setString(14, secUOM);
            oraclecallablestatement.setString(15, lpn);
            oraclecallablestatement.setString(16, locator);

            oraclecallablestatement.registerOutParameter(17, Types.VARCHAR);
            oraclecallablestatement.registerOutParameter(18, Types.VARCHAR);

//            System.out.println("Executing PL/SQL block");
            oraclecallablestatement.execute();

            errCode = oraclecallablestatement.getString(17) + "";
            errBuf = oraclecallablestatement.getString(18) + "";
//            System.out.println("errCode:" + errCode);
//            System.out.println("errBuf:" + errBuf);

            if (errCode != null) {
                if (errCode.equals("0")) {
//                    System.out.println("PL/SQL block Success******");
                    errBuf = "SUCCESS";
                } else
                    ;
//                    System.out.println("PL/SQL block Fail//////" + errBuf);
            } else {
//                System.out.println("No return code");
                errBuf = "";
            }
        } catch (Exception e) {
            throw OAException.wrapperException(e);
        } finally {
            try {
                if (oraclecallablestatement != null)
                    oraclecallablestatement.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        return errBuf;
    }

    /**Container's getter for XXNUCViewSchVO1
     */
    public XXNUCViewSchVOImpl getXXNUCViewSchVO1() {
        return (XXNUCViewSchVOImpl)findViewObject("XXNUCViewSchVO1");
    }
    
    /**
     * sft 933
     * @param strResource
     * @param strOrganizationId
     */
    public void handleViewSchedule(String strResource, 
                                   String strOrganizationId) {
        if (this.isLoggingEnabled(OAFwkConstants.STATEMENT))
            this.writeDiagnostics(this, 
                                  "XXNUCBilletProductionAMImpl: handleViewSchedule: "+strResource+" "+strOrganizationId, 
                                  OAFwkConstants.STATEMENT);
        XXNUCViewSchVOImpl viewSchVo = getXXNUCViewSchVO1();
        viewSchVo.initQuery(strOrganizationId, strResource);
    }

    /**Container's getter for XXNUCBilletIssueFPCheckVO
     */
    public XXNUCBilletIssueFPCheckVOImpl getXXNUCBilletIssueFPCheckVO() {
        return (XXNUCBilletIssueFPCheckVOImpl)findViewObject("XXNUCBilletIssueFPCheckVO");
    }
}
